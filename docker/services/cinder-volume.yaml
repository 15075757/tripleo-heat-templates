heat_template_version: pike

description: >
  OpenStack containerized Cinder Volume service

parameters:
  DockerNamespace:
    description: namespace
    default: 'tripleoupstream'
    type: string
  DockerCinderVolumeImage:
    description: image
    default: 'centos-binary-cinder-volume:latest'
    type: string
  # we configure all cinder services in the same cinder base container
  DockerCinderConfigImage:
    description: image
    default: 'centos-binary-cinder-api:latest'
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  # custom parameters for the Cinder volume role
  CinderEnableIscsiBackend:
    default: true
    description: Whether to enable or not the Iscsi backend for Cinder
    type: boolean
  CinderLVMLoopDeviceSize:
    default: 10280
    description: The size of the loopback file used by the cinder LVM driver.
    type: number

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  CinderBase:
    type: ../../puppet/services/cinder-volume.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Cinder Volume role.
    value:
      service_name: {get_attr: [CinderBase, role_data, service_name]}
      config_settings: {get_attr: [CinderBase, role_data, config_settings]}
      step_config: &step_config
        get_attr: [CinderBase, role_data, step_config]
      service_config_settings: {get_attr: [CinderBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: cinder
        puppet_tags: cinder_config,file,concat,file_line
        step_config: *step_config
        config_image:
          list_join:
            - '/'
            - [ {get_param: DockerNamespace}, {get_param: DockerCinderConfigImage} ]
      kolla_config:
        /var/lib/kolla/config_files/cinder_volume.json:
          command: /usr/bin/cinder-volume --config-file /usr/share/cinder/cinder-dist.conf --config-file /etc/cinder/cinder.conf
          permissions:
            - path: /var/log/cinder
              owner: cinder:cinder
              recurse: true
      docker_config:
        step_3:
          cinder_volume_init_logs:
            start_order: 0
            image: &cinder_volume_image
              list_join:
                - '/'
                - [ {get_param: DockerNamespace}, {get_param: DockerCinderVolumeImage} ]
            privileged: false
            user: root
            volumes:
              - /var/log/containers/cinder:/var/log/cinder
            command: ['/bin/bash', '-c', 'chown -R cinder:cinder /var/log/cinder']
        step_4:
          cinder_volume:
            image: *cinder_volume_image
            net: host
            privileged: true
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/cinder_volume.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/cinder/etc/cinder/:/etc/cinder/:ro
                  - /var/lib/config-data/ceph/etc/ceph/:/etc/ceph/:ro #FIXME: we need to generate a ceph.conf with puppet for this
                  - /dev/:/dev/
                  - /run/:/run/
                  - /sys:/sys
                  - /etc/iscsi:/etc/iscsi
                  - /var/lib/cinder:/var/lib/cinder
                  - /var/log/containers/cinder:/var/log/cinder
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /var/log/containers/cinder
            - /var/lib/cinder
        #FIXME: all of this should be conditional on the CinderEnableIscsiBackend value being set to true
        - name: cinder create LVM volume group dd
          command:
            list_join:
            - ''
            - - 'dd if=/dev/zero of=/var/lib/cinder/cinder-volumes bs=1 count=0 seek='
              - str_replace:
                  template: VALUE
                  params:
                    VALUE: {get_param: CinderLVMLoopDeviceSize}
              - 'M'
          args:
            creates: /var/lib/cinder/cinder-volumes
        - name: cinder create LVM volume group
          shell: |
            if ! losetup /dev/loop2; then
              losetup /dev/loop2 /var/lib/cinder/cinder-volumes
            fi
            if ! pvdisplay | grep cinder-volumes; then
              pvcreate /dev/loop2
            fi
            if ! vgdisplay | grep cinder-volumes; then
              vgcreate cinder-volumes /dev/loop2
            fi
          args:
            executable: /bin/bash
            creates: /dev/loop2
      upgrade_tasks:
        - name: Stop and disable cinder_volume service
          tags: step2
          service: name=openstack-cinder-volume state=stopped enabled=no
