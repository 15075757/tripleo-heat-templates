{% set upgrade_steps_max = 8 -%}
heat_template_version: ocata
description: 'Upgrade steps for all roles'

parameters:
  servers:
    type: json

  role_data:
    type: json
    description: Mapping of Role name e.g Controller to the per-role data

  UpdateIdentifier:
    type: string
    description: >
      Setting to a previously unused value during stack-update will trigger
      the Upgrade resources to re-run on all roles.

conditions:
  # Conditions to disable any steps where the task list is empty
{% for step in range(0, upgrade_steps_max) %}
  {% for role in roles %}
  UpgradeBatchConfig_Step{{step}}Enabled:
    not:
      equals:
        - {get_param: [role_data, {{role.name}}, upgrade_batch_tasks]}
        - []
  UpgradeConfig_Step{{step}}Enabled:
    not:
      equals:
        - {get_param: [role_data, {{role.name}}, upgrade_tasks]}
        - []
  {% endfor %}
{% endfor %}

resources:

# Upgrade Steps for all roles, batched updates
# FIXME(shardy): would be nice to make the number of steps configurable
{% for step in range(0, upgrade_steps_max) %}
  {% for role in roles %}
  # Step {{step}} resources
  {{role.name}}UpgradeBatchConfig_Step{{step}}:
    type: OS::TripleO::UpgradeConfig
    condition: UpgradeBatchConfig_Step{{step}}Enabled
  # The UpgradeConfig resources could actually be created without
  # serialization, but the event output is easier to follow if we
  # do, and there should be minimal performance hit (creating the
  # config is cheap compared to the time to apply the deployment).
  {% if step > 0 %}
    depends_on:
      {% for dep in roles %}
      - {{dep.name}}UpgradeBatch_Step{{step -1}}
      {% endfor %}
  {% endif %}
    properties:
      UpgradeStepConfig: {get_param: [role_data, {{role.name}}, upgrade_batch_tasks]}
      step: {{step}}

  {{role.name}}UpgradeBatch_Step{{step}}:
    type: OS::Heat::StructuredDeploymentGroup
    condition: UpgradeBatchConfig_Step{{step}}Enabled
  {% if step > 0 %}
    depends_on:
      {% for dep in roles %}
      - {{dep.name}}UpgradeBatch_Step{{step -1}}
      {% endfor %}
  {% endif %}
    update_policy:
      batch_create:
        max_batch_size: {{role.upgrade_batch_size|default(1)}}
      rolling_update:
        max_batch_size: {{role.upgrade_batch_size|default(1)}}
    properties:
      name: {{role.name}}UpgradeBatch_Step{{step}}
      servers: {get_param: [servers, {{role.name}}]}
      config: {get_resource: {{role.name}}UpgradeBatchConfig_Step{{step}}}
      input_values:
        role: {{role.name}}
        update_identifier: {get_param: UpdateIdentifier}
  {% endfor %}
{% endfor %}

# Upgrade Steps for all roles
# FIXME(shardy): would be nice to make the number of steps configurable
{% for step in range(0, upgrade_steps_max) %}
  {% for role in roles %}
  # Step {{step}} resources
  {{role.name}}UpgradeConfig_Step{{step}}:
    type: OS::TripleO::UpgradeConfig
    condition: UpgradeConfig_Step{{step}}Enabled
  # The UpgradeConfig resources could actually be created without
  # serialization, but the event output is easier to follow if we
  # do, and there should be minimal performance hit (creating the
  # config is cheap compared to the time to apply the deployment).
    depends_on:
  {% if step > 0 %}
      {% for dep in roles %}
        {% if not dep.disable_upgrade_deployment|default(false) %}
      - {{dep.name}}Upgrade_Step{{step -1}}
        {% endif %}
      {% endfor %}
  {% else %}
      {% for dep in roles %}
      - {{dep.name}}UpgradeBatch_Step{{upgrade_steps_max -1}}
      {% endfor %}
  {% endif %}
    properties:
      UpgradeStepConfig: {get_param: [role_data, {{role.name}}, upgrade_tasks]}
      step: {{step}}
  {% if not role.disable_upgrade_deployment|default(false) %}
  {{role.name}}Upgrade_Step{{step}}:
    type: OS::Heat::StructuredDeploymentGroup
    condition: UpgradeConfig_Step{{step}}Enabled
    depends_on:
  {% if step > 0 %}
      {% for dep in roles %}
        {% if not dep.disable_upgrade_deployment|default(false) %}
      - {{dep.name}}Upgrade_Step{{step -1}}
        {% endif %}
      {% endfor %}
  {% else %}
      {% for dep in roles %}
      - {{dep.name}}UpgradeBatch_Step{{upgrade_steps_max -1}}
      {% endfor %}
  {% endif %}
    properties:
      name: {{role.name}}Upgrade_Step{{step}}
      servers: {get_param: [servers, {{role.name}}]}
      config: {get_resource: {{role.name}}UpgradeConfig_Step{{step}}}
      input_values:
        role: {{role.name}}
        update_identifier: {get_param: UpdateIdentifier}
  {% endif %}
  {% endfor %}
{% endfor %}

outputs:
  # Output the config for each role, just use Step1 as the config should be
  # the same for all steps (only the tag provided differs)
  upgrade_configs:
    description: The per-role upgrade configuration used
    value:
{% for role in roles %}
      {{role.name.lower()}}: {get_attr: [{{role.name}}UpgradeConfig_Step1, upgrade_config]}
{% endfor %}

