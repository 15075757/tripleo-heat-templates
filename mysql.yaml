HeatTemplateFormatVersion: '2012-12-12'
Description: 'HEAT Template - Dedicated MySQL server'
Parameters:
  KeyName: 
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: default
  InstanceType:
    Description: Use this flavor
    Type: String
    Default: m1.small
  MySQLImage:
    Type: String
  KeystoneUser:
    Description: Keystone database username.
    Type: String
    Default: keystone
  BootstrapUrl:
    Description: Fetch a mysql dump file from this URL and load it
    Type: String
    Default: ''
  BootstrapUrl:
    Description: Fetch a mysql config file from this URL to setup local root with bootstrapped database
    Type: String
    Default: ''
Resources:
  ApiAccessPolicy:
    Type: OS::Heat::AccessPolicy
    Properties:
      AllowedResources: [ MySQL ]
  ApiUser:
    Type: AWS::IAM::User
    Properties:
      Policies: [ { Ref: ApiAccessPolicy } ]
  MySQL:
    Type: AWS::EC2::Instance
    Metadata:
      OpenStack::ImageBuilder::Elements: [ openstack-db ]
      OpenStack::Config:
        mysql:
          users:
            - database: keystone
              username: {Ref: KeystoneUser}
              userhandle: {Ref: KeystonePasswordHandle}
          bootstrap_url: {Ref: BootstrapUrl}
          root_cnf_url: {Ref: BootstrapRootCnfUrl}
        heat:
          access_key_id:
            Ref: ApiKey
          secret_key:
            Fn::GetAtt: [ ApiKey, SecretAccessKey ]
          stack:
            name: {Ref: 'AWS::StackName'}
            region: {Ref: 'AWS::Region'}
          refresh:
            - resource: MySQL
    Properties:
      ImageId:
        {Ref: MySQLImage}
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
  KeystonePasswordHandle:
    Type: AWS::CloudFormation:WaitConditionHandle
    Properties:
  KeystonePassword:
    DependsOn: MySQL
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: {Ref: KeystonePasswordHandle}
      Timeout: 60
Outputs:
    MySQLHost: 
        Fn::GetAtt: [ MySQL , PrivateIp ]
    KeystonePassword:
        Fn::GetAtt: [ KeystonePassword, Data ]
    KeystoneUser: {Ref: KeystoneUser}
